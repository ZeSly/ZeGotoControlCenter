; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "ZeGoto Control Center"
#define MyAppVersion "1.0"
#define MyAppPublisher "ZeSly"
#define MyAppURL "http://www.zesly.net/"
#define MyAppExeName "ZeGotoControlCenter.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D3A9E6A4-25FB-49B3-8EBD-4EFC427B7710}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\ZeGotoControlCenter
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputBaseFilename=ZeGotoControlCenter_Setup
ArchitecturesInstallIn64BitMode=x64
Compression=lzma
SolidCompression=yes
UninstallFilesDir="{app}\Uninstall"
OutputDir=.
LicenseFile="Licence_CeCILL_V2.1-en.txt"

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "ascom"; Description: Install ASCOM driver
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
; 64 bits
Source: "x64\Release\ZeGotoControlCenter.exe"; DestDir: "{app}"; Check: Is64BitInstallMode; Flags: ignoreversion
Source: "x64\Release\*"; DestDir: "{app}"; Check: Is64BitInstallMode; Flags: ignoreversion recursesubdirs createallsubdirs
; 32 bits
Source: "Win32\Release\ZeGotoControlCenter.exe"; DestDir: "{app}"; Check: not Is64BitInstallMode; Flags: ignoreversion solidbreak
Source: "Win32\Release\*"; DestDir: "{app}"; Check: not Is64BitInstallMode; Flags: ignoreversion recursesubdirs createallsubdirs
; ASCOM driver, 32 and 64 bits
Source: "x64\Release\ASCOM.ZeGoto.Server.exe"; DestDir: "{app}"; Flags: ignoreversion solidbreak
Source: "x64\Release\ASCOM.ZeGoto.Server.exe.config"; DestDir: "{app}"; Flags: ignoreversion
Source: "x64\Release\ASCOM.ZeGoto.Telescope.dll"; DestDir: "{app}"; Flags: ignoreversion
; Firmware
Source: "C:\Users\ZeSly\MPLABXProjects\ZeGoto.X\release\*.hex"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
Filename: "{app}\ASCOM.ZeGoto.Server.exe"; Parameters: "/register"

[UninstallRun]
Filename: "{app}\ASCOM.ZeGoto.Server.exe"; Parameters: "/unregister"

[CODE]
//
// Before the installer UI appears, verify that the (prerequisite)
// ASCOM Platform 6.0 or greater is installed, including both Helper
// components. Utility is required for all types (COM and .NET)!
//
function InitializeSetup(): Boolean;
var
   U : Variant;
begin
   Result := FALSE;  // Assume failure
   // check that the DriverHelper and Utilities objects exist, report errors if they don't
   try
      U := CreateOLEObject('ASCOM.Utilities.Util');
   except
      MsgBox('The ASCOM Utilities object has failed to load, this indicates that the ASCOM Platform has not been installed correctly', mbInformation, MB_OK);
   end;
   try
      if (U.IsMinimumRequiredVersion(6,0)) then	// this will work in all locales
         Result := TRUE;
   except
   end;
   if(not Result) then
      MsgBox('The ASCOM Platform 6.0 or greater is required for this driver.', mbInformation, MB_OK);
end;

// Code to enable the installer to uninstall previous versions of itself when a new version is installed
procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
  UninstallExe: String;
  UninstallRegistry: String;
begin
  if (CurStep = ssInstall) then // Install step has started
	begin
      // Create the correct registry location name, which is based on the AppId
      UninstallRegistry := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#SetupSetting("AppId")}' + '_is1');
      // Check whether an extry exists
      if RegQueryStringValue(HKLM, UninstallRegistry, 'UninstallString', UninstallExe) then
        begin // Entry exists and previous version is installed so run its uninstaller quietly after informing the user
          MsgBox('Setup will now remove the previous version.', mbInformation, MB_OK);
          Exec(RemoveQuotes(UninstallExe), ' /SILENT', '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
          sleep(1000);    //Give enough time for the install screen to be repainted before continuing
        end
  end;
end;

